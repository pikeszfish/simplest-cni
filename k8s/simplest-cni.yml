kind: ConfigMap
apiVersion: v1
metadata:
  name: simplest-cni-config
  namespace: kube-system
data:
  mtu: "1500"
  bridge: "br0"
  is_gateway: "true"
  is_default_gateway: "true"
  force_address: "true"
  ip_masq: "false"
  hairpin_mode: "false"
  promisc_mode: "true"
  data_dir: "/tmp/k8s-cni-local-host"
  cni_conf_name: 10-bridge.conflist

  # The CNI network configuration to install on each node.
  cni_network_config: |-
    {
      "name": "k8s-pod-network",
      "cniVersion": "0.3.0",
      "plugins": [
        {
          "type": "bridge",
          "mtu": __MTU__,
          "bridge": "__BRIDGE__",
          "isGateway": __IS_GATEWAY__,
          "isDefaultGateway": __IS_DEFAULT_GATEWAY__,
          "forceAddress": __FORCE_ADDRESS__,
          "ipMasq": __IP_MASQ__,
          "hairpinMode": __HAIRPIN_MODE__,
          "promiscMode": __PROMISC_MODE__,
          "ipam": {
              "type": "host-local",
              "ranges": [
                [
                  {
                    "subnet": "__SUBNET_STR__"
                  }
                ]
              ],
              "dataDir": "__DATA_DIR__",
              "routes": [
                {
                  "dst": "0.0.0.0/0"
                }
              ]
          }
        },
        {
          "type": "portmap",
          "snat": true,
          "capabilities": {"portMappings": true}
        }
      ]
    }
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: simplest-cni-sa
  namespace: kube-system
---
kind: DaemonSet
apiVersion: extensions/v1beta1
metadata:
  name: simplest-cni-node
  namespace: kube-system
  labels:
    k8s-app: simplest-cni-node
spec:
  selector:
    matchLabels:
      k8s-app: simplest-cni-node
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  template:
    metadata:
      labels:
        k8s-app: simplest-cni-node
      annotations:
        # Mark this pod as a critical add-on; when enabled, the critical add-on scheduler
        # reserves resources for critical add-on pods so that they can be rescheduled after
        # a failure.  This annotation works in tandem with the toleration below.
        scheduler.alpha.kubernetes.io/critical-pod: ''
    spec:
      hostNetwork: true
      tolerations:
      # this taint is set by all kubelets running `--cloud-provider=external`
      - key: node.cloudprovider.kubernetes.io/uninitialized
        value: "true"
        effect: NoSchedule
      - key: node-role.kubernetes.io/master
        effect: NoSchedule
      # Allow this pod to be rescheduled while the node is in "critical add-ons only" mode.
      # This, along with the annotation above marks this pod as a critical add-on.
      - key: CriticalAddonsOnly
        operator: Exists
      serviceAccountName: simplest-cni-sa
      # Minimize downtime during a rolling upgrade or deletion; tell Kubernetes to do a "force
      # deletion": https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods.
      terminationGracePeriodSeconds: 0
      containers:
        - name: install-cni
          image: pikeszfish/simplest-cni:v0.1.0
          command: ["/install-cni.sh"]
          # securityContext:
          #   privileged: true
          resources:
            requests:
              cpu: 250m
          # env:
          volumeMounts:
            - mountPath: /host/opt/cni/bin
              name: cni-bin-dir
            - mountPath: /etc/cni/net.d
              name: cni-conf-dir
            - mountPath: /simplest-cni-config
              name: simplest-cni-config
        - name: watcher
          image: pikeszfish/simplest-cni:v0.1.0
          command: ["/simplest-cni"]
          securityContext:
            privileged: true
          resources:
            requests:
              cpu: 250m
          env:
            - name: CNI_CONF_PATH
              value: /etc/cni/net.d
            - name: CNI_CONF_NAME
              value: 10-bridge.conflist
          volumeMounts:
            - mountPath: /etc/cni/net.d
              name: cni-conf-dir
      volumes:
        # Used to install CNI.
        - name: cni-bin-dir
          hostPath:
            path: /opt/cni/bin
        - name: cni-conf-dir
          hostPath:
            path: /etc/cni/net.d
        - name: simplest-cni-config
          configMap:
            name: simplest-cni-config
